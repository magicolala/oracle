name: Deploy GitHub Pages

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: github-pages
  cancel-in-progress: true

jobs:
  build:
    name: Build site
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install build dependencies
        run: python -m pip install --upgrade pip markdown
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install frontend dependencies
        run: npm ci
        working-directory: src/oracle/web/frontend
      - name: Build frontend assets
        run: npm run build
        working-directory: src/oracle/web/frontend
      - name: Generate static pages
        run: |
          python <<'PY'

          import os
          import shutil
          from pathlib import Path
          import textwrap

          import markdown

          root = Path("public")
          root.mkdir(parents=True, exist_ok=True)

          assets_src = Path("docs/static")
          if assets_src.exists():
              shutil.copytree(assets_src, root / "static", dirs_exist_ok=True)

          # Copy built frontend assets
          frontend_assets = Path("src/oracle/web/static")
          if frontend_assets.exists():
              shutil.copytree(frontend_assets, root / "static", dirs_exist_ok=True)

          pages = [
              {
                  "source": Path("README.md"),
                  "destination": root / "index.html",
                  "title": "Oracle Chess Assistant",
                  "heading": "Oracle project overview",
                  "description": "Repository overview rendered from README.",
                  "nav_label": "Home",
                  "nav_href": "index.html",
              },
              {
                  "source": Path("docs/demo.html"),
                  "destination": root / "demo/index.html",
                  "title": "Oracle Chess Assistant - Interactive Demo",
                  "heading": "Interactive Demo",
                  "description": "Try the Oracle chess interface with an interactive demo.",
                  "nav_label": "Demo",
                  "nav_href": "demo/",
              },
              {
                  "source": Path("docs/RELEASE_NOTES.md"),
                  "destination": root / "release-notes/index.html",
                  "title": "Oracle Release Notes",
                  "heading": "Release notes",
                  "description": "Latest updates to the Oracle project.",
                  "nav_label": "Release Notes",
                  "nav_href": "release-notes/",
              },
          ]

          template = textwrap.dedent('''<!doctype html>
          <html lang="en">
          <head>
            <meta charset="utf-8">
            <title>{title}</title>
            <meta name="viewport" content="width=device-width, initial-scale=1">
          {icon_tag}
            <style>
              body {{ font-family: system-ui, sans-serif; margin: 0; background: #0f172a; color: #e2e8f0; }}
              header {{ background: #111827; padding: 1.25rem 1.5rem; }}
              nav a {{ color: #38bdf8; margin-right: 1rem; text-decoration: none; font-weight: 600; }}
              nav a:last-child {{ margin-right: 0; }}
              nav a[aria-current="page"] {{ color: #f97316; }}
              main {{ max-width: 960px; margin: 2rem auto; background: #1f2937; padding: 2rem; border-radius: 12px; box-shadow: 0 20px 45px rgba(15,23,42,0.45); }}
              main h1 {{ margin-top: 0; color: #f8fafc; }}
              main a {{ color: #38bdf8; }}
              pre {{ background: #0f172a; padding: 1rem; border-radius: 8px; overflow-x: auto; }}
              code {{ font-family: 'Fira Code', 'SFMono-Regular', Consolas, monospace; }}
              footer {{ text-align: center; padding: 2rem; color: #94a3b8; }}
            </style>
            <meta name="description" content="{description}">
          </head>
          <body>
            <header>
              <nav>{nav}</nav>
            </header>
            <main>
              <h1>{heading}</h1>
              {body}
            </main>
            <footer>
              Built from the <a href="{repo_url}">{repo_name}</a> repository.
            </footer>
          </body>
          </html>
          ''')

          repo_server = os.environ.get("GITHUB_SERVER_URL", "https://github.com").rstrip("/")
          repo_name = os.environ.get("GITHUB_REPOSITORY", "oracle")
          repo_url = f"{repo_server}/{repo_name}"

          nav_candidates = [page for page in pages if page["source"].exists() and page.get("nav_label")]

          icon_exists = (root / "static/logo.jpg").exists()

          generated = []
          for page in pages:
              source = page["source"]
              if not source.exists():
                  continue
              destination = page["destination"]
              destination.parent.mkdir(parents=True, exist_ok=True)
              rel_parts = destination.relative_to(root).parts
              level = max(len(rel_parts) - 1, 0)
              rel_root = "../" * level
              nav_items = []
              for item in nav_candidates:
                  href = f"{rel_root}{item['nav_href']}"
                  attrs = ' aria-current="page"' if item["destination"] == destination else ''
                  nav_items.append(f'<a href="{href}"{attrs}>{item["nav_label"]}</a>')
              nav = ' | '.join(nav_items)
              html_body = markdown.markdown(source.read_text(encoding="utf-8"), extensions=["fenced_code", "tables"])
              icon_tag = f'  <link rel="icon" href="{rel_root}static/logo.jpg">' if icon_exists else ''
              destination.write_text(
                  template.format(
                      title=page["title"],
                      heading=page["heading"],
                      description=page["description"],
                      body=html_body,
                      nav=nav,
                      icon_tag=icon_tag,
                      repo_url=repo_url,
                      repo_name=repo_name,
                  ),
                  encoding="utf-8",
              )
              generated.append(destination)

          if not generated:
              raise SystemExit("No pages were generated; aborting.")

          PY
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

  deploy:
    name: Deploy to GitHub Pages
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy
        id: deployment
        uses: actions/deploy-pages@v4
