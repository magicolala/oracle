import argparse
from dataclasses import replace

from oracle.config import Settings, load_settings, resolve_value
from oracle.interfaces.cli.batch import run_batch_cli

OPENAI_API_KEY = ""
STOCKFISH_PATH = ""
MODEL_NAME = "gpt-3.5-turbo-instruct"
PGN_FILE_PATH = ".pgn"
OUTPUT_FILE_PATH = "analysis_results.csv"
DEPTH = 5
PROB_THRESHOLD = 0.001
DEFAULT_RATING = 2000
DEFAULT_GAME_TYPE = "classical"


def _apply_overrides(settings: Settings) -> Settings:
    return replace(
        settings,
        openai_api_key=resolve_value(OPENAI_API_KEY, settings.openai_api_key),
        stockfish_path=resolve_value(STOCKFISH_PATH, settings.stockfish_path),
        model_name=resolve_value(MODEL_NAME, settings.model_name),
    )


def _parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Batch PGN analysis with Oracle")
    parser.add_argument("--pgn", default=PGN_FILE_PATH, help="Path to the input PGN file")
    parser.add_argument("--output", default=OUTPUT_FILE_PATH, help="Path to the output CSV file")
    parser.add_argument("--depth", type=int, default=DEPTH, help="Depth for GPT exploration")
    parser.add_argument("--prob-threshold", type=float, default=PROB_THRESHOLD, help="Probability threshold for token expansion")
    parser.add_argument("--default-rating", type=int, default=DEFAULT_RATING, help="Fallback rating when PGN lacks Elo headers")
    parser.add_argument("--game-type", default=DEFAULT_GAME_TYPE, help="Fallback game type when PGN lacks time control")
    return parser.parse_args()


def main() -> None:
    args = _parse_args()
    settings = _apply_overrides(load_settings())
    run_batch_cli(
        settings,
        pgn_path=args.pgn,
        output_path=args.output,
        depth=args.depth,
        prob_threshold=args.prob_threshold,
        default_rating=args.default_rating,
        default_game_type=args.game_type,
    )


if __name__ == "__main__":
    main()
